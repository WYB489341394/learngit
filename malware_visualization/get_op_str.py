import os
import time


def getfunc(input_path,output_path):
    file = open(input_path, 'r')
    fo = file.readlines()
    textflag = False
    funcflag = False
    funclist = []

    for i, line in enumerate(fo):
        if '_text' in line and 'ends' in line:
            # print str(i) + ' is the end.'
            break

        if textflag:
            if len(line) != 1 and line[0] != ';' and '=' not in line and 'align ' not in line and (
                    '+' not in line or ('+' in line and '[' in line) or ('+' in line and 'CODE' in line) or (
                    '+' in line and 'DATA' in line)) and line.count('h') < 4:

                line = line[:line.find(';')].strip()

                if len(line) == 0:
                    continue

                code_list = line.split('\t')
                code_str = ''.join(code_list[len(code_list) - 2:]).strip()
                # print i + 1, code_str

                if 'proc near' in code_str:
                    # print '1 ' + code_str
                    funcflag = True
                    FuncStr = ''
                    funName = code_str.split(' ')[0]
                    # FileDict[funName] = dict()

                elif 'endp' in code_str and code_str.split(' ')[0] == funName:

                    # print '0 ' + code_str
                    funclist.append(FuncStr)



                elif 'loc' == code_str[0:3] and funcflag == True:
                    continue

                elif funcflag == True:
                    # print '3 '
                    try:
                        OpList = code_str.split(' ')
                        if len(OpList[0]) >= 3:
                            OpStr = OpList[0][:3]
                        else:
                            OpStr = OpList[0] + ' '
                        FuncStr = FuncStr + OpStr

                    except:
                        print 'Format Wrong: ' + code_str

        if '_text' in line and 'ends' not in line:
            textflag = True
            # print str(i) + ' is the start.' + '\n'


    # print funclist,'\n'
    # print funclist[-1], '\n', funclist[-2]

    file = open(output_path, 'w')
    for i in range(len(funclist)):
        file.write(funclist[i] + '\n')
    file.close()

    # with open(output_path + '.json', 'w') as f:
    #     json.dump(funclist, f,indent=4)



if __name__ == '__main__':
    time_start=time.time()

    # the test path
    # file_path = r'F:\virtus_test\3virtus_asm'
    # output_path = r'F:\virtus_test\3virtus_func2'

    file_path = r'F:\virtus_test\10virtus_asm'
    output_path = r'F:\virtus_test\10virtus_func'

    if not os.path.isdir(output_path):
        os.makedirs(output_path)

    list_dirs = os.walk(file_path)

    for root, dirs, files in list_dirs:
        for d in dirs:
            if not os.path.isdir(os.path.join(output_path, d)):
                os.makedirs(os.path.join(output_path, d))

        for f in files:
            virtus_file_name=os.path.join(root, f)
            print virtus_file_name + ' is turning.'
            pathPart = root.split("\\")
            FamilyPath = os.path.join(output_path, pathPart[len(pathPart) - 1])
            FilePath = os.path.join(FamilyPath, f)
            try:
                getfunc(os.path.join(root, f),FilePath)
            except:
                print virtus_file_name, 'is lost.'
            print 'Turning is over.'

    print 'ALL IS OVER!'
    time_end=time.time()
    print'Time cost is ',(time_end-time_start)/60,'min'



