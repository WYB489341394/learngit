'''
import sys
reload(sys)
sys.setdefaultencoding('utf-8')
'''

import re
import time
import cv2
import numpy as np
import os
from simhash import Simhash
import csv



def get_features(s):
    width = 3
    s = s.lower()
    s = re.sub(r'[^\w]+', '', s)
    box = []
    # print len(s)
    for i in range(0,len(s),3):
        # print i
        box.append(s[i:i+3])
    return box
    # return [s[i:i+width] for i in range(max(len(s) - width + 1, 1),3)]
'''

def get_features(s):
    width = 3
    s = s.lower()
    s = re.sub(r'[^\w]+', '', s)
    return [s[i:i + width] for i in range(max(len(s) - width + 1, 1))]
'''
def get_Point(OpCode):
    # print get_features(OpCode)
    # print Simhash(get_features(OpCode)).value
    A = hex(Simhash(get_features(OpCode)).value)
    if len(A) > 18:
        A = A[0:18]

    print A, len(A)
    ZeroSet = [0, 1, 2, 3, 4, 6, 8, 12]
    OneSet = [5, 7, 9, 10, 11, 13, 14, 15]

    X = list('00000000')
    Y = list('00000000')
    if len(A) > 3:
        for i in range(2, 8 + 2):
            if ord(A[i]) >= 102 and ord(A[i]) <= 122:
                X[i - 2] = '1'
                continue
            if (ord(A[i]) >= 70 and ord(A[i]) <= 90):
                X[i - 2] = '1'
                continue
            if int(A[i], 16) in OneSet:
                X[i - 2] = '1'
        for i in range(8 + 2, len(A)):
            if ord(A[i]) >= 102 and ord(A[i]) <= 122:
                Y[i - 2 - 8] = '1'
                continue
            if (ord(A[i]) >= 70 and ord(A[i]) <= 90):
                Y[i - 2 - 8] = '1'
                continue
            if int(A[i], 16) in OneSet:
                Y[i - 2 - 8] = '1'

    X = int(''.join(X), 2)
    Y = int(''.join(Y), 2)

    # print X, Y, A, len(A)
    return X, Y

def get_Image(InputfilePath):
    fo = open(InputfilePath, "r")

    image = np.zeros((256,256), np.uint8)
    # image = np.zeros((256, 256))
    strr = fo.readlines()

    # count = 0
    for str in strr:
        if len(str) != 0:
            # count +=1
            X,Y = get_Point(str)
            # print X,Y,'\n'
            if image[X,Y] < 240:
                image[X,Y] += 16
    # print 4
    return image

def updateMostN(Box, x, y, light):
    if light > Box[2].min():
        Temp1 = np.array([x, y, light])
        Temp2 = np.zeros(3,np.int)

        for i in range(len(Box)):
            if Box[i,2] < Temp1[2]:
                Temp2 = Box[i].copy()
                Box[i] = Temp1
                Temp1 = Temp2

def ImageMatrix(FamilyFolder,ResultPath):
    Matrix = np.zeros((256, 256), np.int16)
    MostCommonMatrix = np.zeros((256, 256), np.int16)
    MostLightMatrix = np.zeros((256, 256), np.int16)
    MostCommonPoint = np.zeros((5, 3), np.int16)
    # number = 0
    sub_list_dirs = os.walk(FamilyFolder)
    for root, dirs, files in sub_list_dirs:
        for f in files:
            # number += 1
            MostLightPoint = np.zeros((5, 3), np.int16)

            imagePath = os.path.join(root, f)
            print imagePath
            image = get_Image(imagePath)

            for i in range(len(image)):
                for j in range(len(image[0])):
                    if image[i, j] != 0:
                        Matrix[i, j] += 1
                    updateMostN(MostLightPoint, i, j, image[i, j])
            for i in range(len(MostLightPoint)):
                MostLightMatrix[MostLightPoint[i,0],MostLightPoint[i,1]] = 1
            # print MostLightPoint

        for i in range(len(Matrix)):
            for j in range(len(Matrix[0])):
                updateMostN(MostCommonPoint, i, j, Matrix[i, j])
        for i in range(len(MostCommonPoint)):
            MostCommonMatrix[MostCommonPoint[i, 0], MostCommonPoint[i, 1]] = 1


        for f in files:
            pathPart = root.split("\\")
            FamilyPath = os.path.join(ResultPath, pathPart[len(pathPart) - 1])
            FilePath = os.path.join(FamilyPath, f)
            # print os.path.join(root, f)
            print '--- >' + FilePath
            fo = open(os.path.join(root, f), "r")
            Strings = 'start'

            Index = [0, 1, 2, 3, 4]
            newFile = []
            for i in range(len(Index)):
                newFile.insert(i, '--(' + MostCommonPoint[i, 0].astype(np.str) + ', ' + MostCommonPoint[i, 1].astype(
                    np.str) + ')--\n')
            # print 'inserted it'

            while 1:
                Title = Strings
                Strings = fo.readline()
                if not Strings:
                    break
                    print 0

                if Strings[0:2] != 'fu' and Strings != '\r\n':
                    # print number
                    X, Y = get_Point(Strings[0:len(Strings) - 2])
                    if MostCommonMatrix[X,Y] != 0 and MostLightMatrix[X,Y] != 0:
                        flag = 0
                        for i in range(len(Index)):
                            if flag == 1:
                                Index[i] = Index[i] + 3
                            if MostCommonPoint[i,0] == X and MostCommonPoint[i,1] == Y:
                                Index[i] = Index[i] + 1
                                newFile.insert(Index[i],Title)
                                Index[i] = Index[i] + 1
                                newFile.insert(Index[i], Strings)
                                # Index[i] = Index[i] + 1
                                # newFile.insert(Index[i], str(X) + ' , '+ str(Y) + '\n')
                                Index[i] = Index[i] + 1
                                newFile.insert(Index[i], '\n')

                                flag = 1
                        # print 2
            # print os.path.join(root, f)+'.s'
            fo.close()

            fo2 = open(FilePath +'.s','wb')
            for i in range(len(newFile)):
                fo2.write(newFile[i])
            fo2.close()
            # print 1

        # for f in files:
        #     pathPart = root.split("/")
        #     FamilyPath = os.path.join(ResultPath, pathPart[len(pathPart) - 1])
        #     FilePath = os.path.join(FamilyPath, f)
        #     # print os.path.join(root, f)
        #     print '--- >' + FilePath
        #     fo = open(os.path.join(root, f), "r")
        #     fo2 = open(FilePath + '.s', 'wb')
        #     Strings = 'start'
        #
        #     while 1:
        #         Title = Strings
        #         Strings = fo.readline()
        #         if not Strings:
        #             break
        #             print 0
        #
        #         if Strings[0:2] != 'fu' and Strings != '\r\n':
        #             # print number
        #             X, Y = get_Point(Strings[0:len(Strings) - 2])
        #             if MostCommonMatrix[X,Y] != 0 and MostLightMatrix[X,Y] != 0:
        #                 fo2.write(Title)
        #                 fo2.write(Strings)
        #                 fo2.write('\n')
        #     fo.close()
        #     fo2.close()



    return Matrix, MostLightMatrix

if __name__ == '__main__':
    time_start = time.time()
    malwarePath = r'F:\virtus_test\10virtus_func'
    ResultPath = r'F:\virtus_test\10virtus_Matrix'
    number = 0

    # Traverse all files and get the Image of the corresponding one
    list_dirs = os.walk(malwarePath)
    for root, dirs, files in list_dirs:
        for d in dirs:
            print os.path.join(ResultPath, d)
            if not os.path.isdir(os.path.join(ResultPath, d)):
                os.makedirs(os.path.join(ResultPath, d))

            subdir = os.path.join(root, d)
            print subdir

            Matrix, MostLightMatrix = ImageMatrix(subdir,ResultPath)

            np.savetxt(ResultPath + '\\' + d + '_Matrix.csv',Matrix,delimiter=',')
            np.savetxt(ResultPath + '\\' + d + '_LightPoint.csv',MostLightMatrix,delimiter=',')

            print d + ' Matrix Completed!'

    time_end = time.time()
    print'Time cost is ', (time_end - time_start) / 60, 'min'







