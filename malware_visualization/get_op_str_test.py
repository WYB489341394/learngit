# -*- coding: utf-8 -*-
if __name__ == '__main__':

    f = open(r'F:\virtus_test\3virtus_asm\AdLoad\0000C5BB6F68A1E6A02206D84927E2FC.F5D06068.asm', 'r')
    fo = f.readlines()
    textflag = False
    funcflag = False
    funclist = []
    begin = end = 0
    funcraw = []

    for i, line in enumerate(fo):

        if '_text' in line and 'ends' in line:
            print str(i) + ' is the end.'
            break

        if textflag:
            if len(line) != 1 and line[0] != ';' and '=' not in line and 'align ' not in line and (
                    '+' not in line or ('+' in line and '[' in line) or ('+' in line and 'CODE' in line) or (
                    '+' in line and 'DATA' in line)) and line.count('h') < 4:

                line = line[:line.find(';')].strip()

                if len(line) == 0:
                    continue

                code_list = line.split('\t')
                code_str = ''.join(code_list[len(code_list) - 2:]).strip()
                print i + 1, code_str



                if 'proc near' in code_str:
                    # print '1 ' + code_str
                    funcflag = True
                    FuncStr = ''
                    begin = i + 1
                    funName = code_str.split(' ')[0]
                    # FileDict[funName] = dict()

                elif 'endp' in code_str and code_str.split(' ')[0] == funName:

                    # print '0 ' + code_str
                    funclist.append(FuncStr)
                    end = i + 1
                    funcraw.append([begin, end])
                    funcflag = False

                elif 'loc' == code_str[0:3] and funcflag == True:
                    continue

                elif funcflag == True:
                    # print '3 '
                    try:
                        OpList = code_str.split(' ')
                        if len(OpList[0]) >= 3:
                            OpStr = OpList[0][:3]
                        else:
                            OpStr = OpList[0] + ' '
                        FuncStr = FuncStr + OpStr

                    except:
                        print 'Format Wrong: ' + code_str



        if '_text' in line and 'ends' not in line:
            textflag = True
            print str(i) + ' is the start.' + '\n'

    print funcraw, '\n', len(funcraw)
    print funclist
    print funclist[-1],'\n',funclist[-2]