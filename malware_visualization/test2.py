import os
import cv2
import numpy as np
from simhash import Simhash
import re

def get_features(s):
    width = 3
    s = s.lower()
    # s = re.sub(r'[^\w]+', '', s)
    box = []
    # print len(s)
    for i in range(0,len(s),3):
        # print i
        box.append(s[i:i+3])
    return box

def get_Point2(OpCode):
    # print get_features(OCode)
    # print Simhash(get_features(OpCode)).value
    B = get_features(OpCode)
    C = Simhash(get_features(OpCode)).value
    A = hex(Simhash(get_features(OpCode)).value)
    if len(A) > 18:
        A = A[0:18]

    # print A, len(A)
    ZeroSet = [0, 1, 2, 3, 4, 6, 8, 12]
    OneSet = [5, 7, 9, 10, 11, 13, 14, 15]

    X = list('00000000')
    Y = list('00000000')

    for i in range(2, 8 + 2):
        if ord(A[i]) >= 102 and ord(A[i]) <=122:
            X[i - 2] = '1'
            continue
        if (ord(A[i]) >= 70 and ord(A[i]) <= 90) :
            X[i - 2] = '1'
            continue
        if int(A[i], 16) in OneSet:
            X[i - 2] = '1'
    for i in range(8 + 2, len(A)):
        if ord(A[i]) >= 102 and ord(A[i]) <=122:
            Y[i - 2 - 8] = '1'
            continue
        if (ord(A[i]) >= 70 and ord(A[i]) <= 90) :
            Y[i - 2 - 8] = '1'
            continue
        if int(A[i], 16) in OneSet:
            Y[i - 2 - 8] = '1'

    X = int(''.join(X), 2)
    Y = int(''.join(Y), 2)

    # print X, Y,'\n'
    return X, Y

def get_Point(OpCode):
    # print get_features(OCode)
    # print Simhash(get_features(OpCode)).value
    # B = get_features(OpCode)
    # C = Simhash(get_features(OpCode)).value
    _16bit_simhash = Simhash(get_features(OpCode),f=16).value
    _16bit_simhash_binary = bin(_16bit_simhash)[2:]
    if len(_16bit_simhash_binary) < 16:
        _16bit_simhash_binary = _16bit_simhash_binary.zfill(16)

    X = _16bit_simhash_binary[:8]
    Y = _16bit_simhash_binary[8:]

    X = int('0b'+X,2)
    Y = int('0b'+Y,2)

    # print X, Y,'\n'
    return X, Y

OpCode = 'm_8'
X,Y = get_Point(OpCode)
XX,YY = get_Point2(OpCode)

print X,Y
print XX,YY
# B = get_features(OpCode)
# _8bit_simhash = Simhash(get_features(OpCode),f=16).value
# # _64bit_simhash = Simhash(get_features(OpCode)).value
# # D = hex(Simhash(get_features(OpCode)).value)
# _8bit_simhash_num = bin(_8bit_simhash)[2:]
# _8bit_simhash_num_L = len(_8bit_simhash_num)
#
# _8bit_simhash_num_new1 = _8bit_simhash_num[::-1]
# _8bit_simhash_num_new2 = _8bit_simhash_num_new1.ljust(16,'0')
# _8bit_simhash_num_new3 = _8bit_simhash_num_new2[::-1]
#
# _8bit_simhash_num_new4 = '{:016b}'.format(int(_8bit_simhash))
# _8bit_simhash_num_new5 = _8bit_simhash_num.zfill(16)
# # _64bit_simhash_num = bin(_64bit_simhash)[2:]
# # _64bit_simhash_num_L = len(_64bit_simhash_num)
# print (_8bit_simhash_num_new3 == _8bit_simhash_num_new4),(_8bit_simhash_num_new3 == _8bit_simhash_num_new5),(_8bit_simhash_num_new5 == _8bit_simhash_num_new4)


print 1