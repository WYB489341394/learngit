import os
import cv2
import numpy as np
from simhash import Simhash
import json

def get_features(s):
    width = 3
    s = s.lower()
    # s = re.sub(r'[^\w]+', '', s)
    box = []
    # print len(s)
    for i in range(0,len(s),3):
        # print i
        box.append(s[i:i+3])
    return box
    # return [s[i:i+width] for i in range(max(len(s) - width + 1, 1),3)]


def get_Point(OpCode):
    # print get_features(OCode)
    # print Simhash(get_features(OpCode)).value
    A = hex(Simhash(get_features(OpCode)).value)
    if len(A) > 18:
        A = A[0:18]

    print A, len(A)
    ZeroSet = [0, 1, 2, 3, 4, 6, 8, 12]
    OneSet = [5, 7, 9, 10, 11, 13, 14, 15]

    X = list('00000000')
    Y = list('00000000')

    for i in range(2, 8 + 2):
        if int(A[i], 16) in OneSet:
            X[i - 2] = '1'
    for i in range(8 + 2, len(A)):
        if int(A[i], 16) in OneSet:
            Y[i - 2 - 8] = '1'

    X = int(''.join(X), 2)
    Y = int(''.join(Y), 2)

    # print X, Y, A, len(A)
    return X, Y

def get_Image(InputfilePath,OutputfilePath):
    with open(InputfilePath, 'r') as f:
        data = json.load(f)

    image = np.zeros((256,256), np.uint8)
    # image = np.zeros((256, 256))
    for i in data:
        j= str(i)
        if len(j) != 0:
            # count +=1
            X,Y = get_Point(j)
            print X,Y
            # x,y = image[x,y]
            if image[X,Y] < 240:
                image[X,Y] += 16

    # count = 0
    # print 1
    cv2.imwrite(OutputfilePath,image)
    # print 4

if __name__ == '__main__':
    # malwarePath = r'F:\virtus_test\10virtus_func'
    # imagePath = r'F:\virtus_test\FuncOpcodeHashImage'
    malwarePath = r'F:\virtus_test\3virtus_func2'
    imagePath = r'F:\virtus_test\3FuncOpcodeHashImage'
    number = 0

    # make folder that all Image in
    if not os.path.isdir(imagePath):
        os.makedirs(imagePath)

    # Traverse all files and get the Image of the corresponding one
    list_dirs = os.walk(malwarePath)
    for root, dirs, files in list_dirs:
        for d in dirs:
            if not os.path.isdir(os.path.join(imagePath, d)):
                os.makedirs(os.path.join(imagePath, d))

        for f in files:
            pathPart = root.split("\\")
            ImageFamilyPath = os.path.join(imagePath, pathPart[len(pathPart) - 1])
            ImageFilePath = os.path.join(ImageFamilyPath, f)
            print os.path.join(root, f)
            # print ImageFilePath
            get_Image(os.path.join(root, f), ImageFilePath + '.jpg')
            # try:
            #     # print '----------------------------'
            #     get_Image(os.path.join(root, f), ImageFilePath+'.jpg')
            #     # print '----------------------------'
            # except:
            #     # show Messages "!!!" when can`t translate malware to Image
            #     print os.path.join(root, f) + '!!!--> ".jpg"'
            #     number = number + 1
            # print 'point'
    print 'Finish! number of the lost samples is ' + str(number)
