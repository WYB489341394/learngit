import json
import os
from simhash import Simhash
import multiprocessing
import Jump_Relation_H as JRH

import numpy as np
import pandas as pd


def isSim(SimValue1, SimValue2):
    score = 0

    for i in range(0, 16, 2):
        if SimValue1[i:i + 2] == SimValue2[i:i + 2]:
            score += 1
        if score >= 5:
            # print SimValue1
            # print SimValue2
            return True
    return False


def iSim(FuncTrain, FuncTest, LDict):
    lengthTest = 0
    for i in FuncTest:
        lengthTest += len(FuncTest[i]['Opt'])
    lengthTrain = 0.0
    for i in LDict:
        lengthTrain += len(FuncTrain[i]['Opt'])
    # print lengthTrain, lengthTest, lengthTrain/lengthTest
    P = 0.0
    if lengthTest == 0:
        return 0
    else:
        return lengthTrain / lengthTest


def JumpSim(FuncTrain, FuncTest, LDict):
    MapTrain2Test = dict()
    MapTest2Train = dict()

    testUsedList = list()

    for i in FuncTrain:
        if i in LDict:
            for j in FuncTest:
                if isSim(FuncTrain[i]["Sim"], FuncTest[j]["Sim"]) and j not in testUsedList:
                    MapTest2Train[j] = i
                    MapTrain2Test[i] = j

                    testUsedList.append(j)
                    # print MapTrain2Test
                    # print MapTest2Train
                    continue

    if len(LDict) != len(MapTest2Train) or len(LDict) != len(MapTrain2Test):
        return False
    else:

        TrainJumpMatrix = pd.DataFrame(np.zeros((len(MapTrain2Test), len(MapTrain2Test)), np.float64),
                                       index=MapTrain2Test.keys(), columns=MapTrain2Test.keys())
        TestJumpMatrix = pd.DataFrame(np.zeros((len(MapTest2Train), len(MapTest2Train)), np.float64),
                                      index=MapTest2Train.keys(), columns=MapTest2Train.keys())
        for i in FuncTrain:
            for j in FuncTrain[i]['Jump']:
                if j in MapTrain2Test and i in MapTrain2Test:
                    TrainJumpMatrix[i][j] += 1
        for i in FuncTest:
            for j in FuncTest[i]['Jump']:
                if j in MapTest2Train and i in MapTest2Train:
                    TestJumpMatrix[i][j] += 1

        # print TrainJumpMatrix
        # print TestJumpMatrix

        for i in TrainJumpMatrix.columns:
            for j in TrainJumpMatrix.index:
                if TrainJumpMatrix[i][j] != TestJumpMatrix[MapTrain2Test[i]][MapTrain2Test[j]]:
                    # print 'Not sim'
                    return False

        return True


def getSimFile(testFile, trainSet, SimTable):
    print testFile + ' is Analysesed!'
    Test = testFile
    ExtTrain = trainSet
    testSample = JRH.analysis(Test)
    SimBigFuncs = 0.0
    BlockNumber = 1.0

    SimFileDict = dict()
    AllLength = len(testSample)
    T = 0

    for i in testSample:
        T += 1
        print  testFile + ' : ' + str(T) + ' / ' + str(AllLength)
        # # # STEP 1
        # print i + ' is On Step 1'
        SimilarFunc = dict()
        for j in testSample[i]:
            BlockNumber += 1
            for n in SimTable:
                if isSim(n, testSample[i][j]['Sim']):
                    if SimTable[n]['FileName'] + '--' + SimTable[n]['FuncName'] in SimilarFunc:
                        SimilarFunc[SimTable[n]['FileName'] + '--' + SimTable[n]['FuncName']][
                            SimTable[n]['BlockName']] = j
                        # print SimTable[n]
                    else:
                        SimilarFunc[SimTable[n]['FileName'] + '--' + SimTable[n]['FuncName']] = {
                            SimTable[n]['BlockName']: j}

        # print 'get SimilarTable!'
        # print SimilarFunc

        # # # STEP 2
        # print i + ' is On Step 2'
        PSet = dict()
        for j in SimilarFunc:
            # print j
            File = j.split('--')[0]
            Func = j.split('--')[1]
            with open(os.path.join(ExtTrain, File)) as f1:
                data = json.load(f1)

            # print data[Func]
            # print testSample[i]
            # print SimilarFunc[j]

            if iSim(data[Func], testSample[i], SimilarFunc[j]) > 0.5:
                PSet[j] = dict()
                PSet[j]['SimilarBlock'] = SimilarFunc[j]
                PSet[j]['Func'] = data[Func]

                # print 'iSim Done'

        # # # STEP 3
        # print i + ' is On Step 3'
        for j in PSet:

            # print PSet[j]['SimilarBlock']
            File = j.split('--')[0]
            Func = j.split('--')[1]

            if len(PSet[j]['SimilarBlock']) == 1:
                # print j + ' --~~~-->> ' + i
                if File not in SimFileDict:
                    SimFileDict[File] = 1
                else:
                    SimFileDict[File] += 1
            # elif JumpSim():
            elif JumpSim(PSet[j]['Func'], testSample[i], PSet[j]['SimilarBlock']):
                # print j + ' --~~~-->> ' + i + ' #######'

                if File not in SimFileDict:
                    SimFileDict[File] = 1000000
                else:
                    SimFileDict[File] += 1000000

    length = len(testSample)
    if length == 0:
        length = 1

    # FuncNumber = 0.0
    # if length < 70:
    #     for i in SimFileDict:
    #         if SimFileDict[i] > 1000000:
    #             SimBigFuncs += 1
    #             FuncNumber += float(int(SimFileDict[i] / 1000000))
    # else:
    #     for i in SimFileDict:
    #         if SimFileDict[i] > 10000000:
    #             SimBigFuncs += 1
    #             FuncNumber += float(int(SimFileDict[i] / 1000000))

    # return SimFileDict, len(testSample), SimBigFuncs
    return {'Score1 (len(FileDict)/length)': float(len(SimFileDict)) / length,
            'Score2 (SimBigFuncs/length)': SimBigFuncs / length,
            'SimilarFiles': len(SimFileDict), 'SizeOfFile': length, 'Details': SimFileDict, "SimBigFuncs": SimBigFuncs,
            "BlockNumber": BlockNumber}



if __name__ == '__main__':
    InvertedTable = r'F:\virtus_test\asm_file2\Sim.json'
    trainSet = r'F:\virtus_test\asm_file2\ExtTrain'
    # Test = '/home/houmo/Downloads/malware_test/test/8_2.asm'
    testSet = r'F:\virtus_test\asm_file2\test'
    OutPath = r'F:\virtus_test\asm_file2\SimInfo.json'
    reportOupPath3 = r'F:\virtus_test\asm_file2\reportGroup3.csv'
    reportOupPathOther = r'F:\virtus_test\asm_file2\reportGroupOther.csv'

    SimInfoDict = dict()

    reportGroup3 = pd.DataFrame(columns=('Score2', 'Size', 'SimBigFuncs', 'SimFuncs', "BlockNumber"), dtype=float)
    reportGroupOther = pd.DataFrame(columns=('Score2', 'Size', 'SimBigFuncs', 'SimFuncs', "BlockNumber"), dtype=float)

    with open(InvertedTable, 'r') as f:
        SimTable = json.load(f)
    testDirList = os.listdir(testSet)
    # print testDirList

    pool = multiprocessing.Pool(processes=3)
    for i in testDirList:
        # SimInfoDict[i] = getSimFile(os.path.join(testSet, i), trainSet, SimTable)
        SimInfoDict[i] = pool.apply_async(getSimFile, (os.path.join(testSet, i), trainSet, SimTable,))
        # print len(FileDict)
        # print FileDict
    pool.close()
    pool.join()

    for i in SimInfoDict:
        SimInfoDict[i] = SimInfoDict[i].get()

    with open(OutPath, 'w') as F:
        json.dump(SimInfoDict, F, indent=4)

    for i in SimInfoDict:
        if SimInfoDict[i]['SimilarFiles'] > 40:
            reportGroup3.loc[i, :] = [SimInfoDict[i]['Score2 (SimBigFuncs/length)'], SimInfoDict[i]['SizeOfFile'],
                                      SimInfoDict[i]['SimBigFuncs'], SimInfoDict[i]['SimilarFiles'],
                                      SimInfoDict[i]['BlockNumber']]
        else:
            reportGroupOther.loc[i, :] = [SimInfoDict[i]['Score2 (SimBigFuncs/length)'], SimInfoDict[i]['SizeOfFile'],
                                      SimInfoDict[i]['SimBigFuncs'], SimInfoDict[i]['SimilarFiles'],
                                      SimInfoDict[i]['BlockNumber']]

    with open(OutPath, 'w') as F:
        json.dump(SimInfoDict, F, indent=4)
    reportGroup3.to_csv(reportOupPath3, sep=',', header=True, index=True)
    reportGroupOther.to_csv(reportOupPathOther, sep=',', header=True, index=True)

'''
if __name__ == '__main__':
    funcTrain = {
        "locret_424FCF": {
            "Opt": [
                "leave",
                "ret val"
            ],
            "Jump": [],
            "Sim": "b977d59aa6b7f1ae"
        },
        "loc_424FC1": {
            "Opt": [
                "adc r32 val",
                "sbb r32 val",
                "adc r32 r32"
            ],
            "Jump": [],
            "Sim": "3a4fbee5988f3420"
        },
        "sub_424F68": {
            "Opt": [
                "pus r32",
                "mov r32 r32",
                "sub r32 val",
                "tes r32 val",
                "jb0 loc",
                "lea r32 mem",
                "lea r32 mem",
                "cmp mem r32",
                "ja0 loc",
                "sbb r32 val",
                "lea r32 mem",
                "or0 r32 val"
            ],
            "Jump": [
                "loc_424FA5",
                "loc_424F95"
            ],
            "Sim": "b206bc1381329f21"
        },
        "loc_424FA5": {
            "Opt": [
                "tes mem r32",
                "jz0 loc",
                "cmp r32 mem",
                "jb0 loc",
                "pus val",
                "pop r32",
                "lea r32 mem",
                "lea r32 mem",
                "lea r32 mem"
            ],
            "Jump": [
                "loc_424FC1",
                "locret_424FCM"
            ],
            "Sim": "acc1b88bd125d526"
        },
        "loc_424F95": {
            "Opt": [
                "or0 r32 mem",
                "pus val",
                "pop r32",
                "and r32 val",
                "sbb r32 r32"
            ],
            "Jump": [],
            "Sim": "eecbad043bbbf402"
        }
    }

    funcTest = {
        "locret_524FCF": {
            "Opt": [
                "leave",
                "ret val"
            ],
            "Jump": [],
            "Sim": "b977d59aa6b7f1ae"
        },
        "loc_524FC1": {
            "Opt": [
                "adc r32 val",
                "sbb r32 val",
                "adc r32 r32"
            ],
            "Jump": [],
            "Sim": "3a4fbee5988f3420"
        },
        "sub_524F68": {
            "Opt": [
                "pus r32",
                "mov r32 r32",
                "sub r32 val",
                "tes r32 val",
                "jb0 loc",
                "lea r32 mem",
                "lea r32 mem",
                "cmp mem r32",
                "ja0 loc",
                "sbb r32 val",
                "lea r32 mem",
                "or0 r32 val"
            ],
            "Jump": [
                "loc_524FA5",
                "loc_524F95"
            ],
            "Sim": "b206bc1381329f21"
        },
        "loc_524FA5": {
            "Opt": [
                "tes mem r32",
                "jz0 loc",
                "cmp r32 mem",
                "jb0 loc",
                "pus val",
                "pop r32",
                "lea r32 mem",
                "lea r32 mem",
                "lea r32 mem"
            ],
            "Jump": [
                "loc_524FC1",
                "locret_524FCF"
            ],
            "Sim": "acc1b88bd125d526"
        },
        "loc_524F95": {
            "Opt": [
                "or0 r32 mem",
                "pus val",
                "pop r32",
                "and r32 val",
                "sbb r32 r32"
            ],
            "Jump": [],
            "Sim": "eecbad043bbbf402"
        }
    }

    LDict = {"locret_424FCF": "locret_524FCF",
             "loc_424FC1": "loc_524FC1",
             "sub_424F68": "sub_524F68",
             "loc_424FA5": "loc_524FA5",
             "loc_424F95": "loc_524F95"}

    print JumpSim(funcTrain, funcTest, LDict)
'''
