import json
import os
from simhash import Simhash

reg_8_list = ['al', 'ah', 'bl', 'bh', 'cl', 'ch', 'dl', 'dh']
reg_16_list = ['ax', 'bx', 'cx', 'dx', 'si', 'di', 'bp', 'sp']
reg_32_list = ['eax', 'ebx', 'ecx', 'edx', 'esi', 'edi', 'ebp', 'esp']
seg_list = ['ds:', 'cs:', 'es:', 'ss:', 'fs:', 'gs:']

def format_val(value):
    # return value
    for i in seg_list:
        if i in value:
            return 'MEM'
    if 'sub' in value:
        return 'sub_XXX'
    elif 'loc' in value:
        return 'loc_XXX'
    elif '[' in value and ']' in value:
        return 'MEM'
    elif 'offset' in value or 'ptr' in value:
        return 'MEM'
    elif 'h' in value or value.isdigit() or 'db ' in value:
        return 'VAL'

    elif value in reg_32_list:
        return 'REG32'
    elif value in reg_16_list:
        return 'REG16'
    elif value in reg_8_list:
        return 'REG8'
    elif 'dword_' in value:
        return 'VAL'
    else:
        return 'OTH'

# def format_val(value):
#     # return value
#     for i in seg_list:
#         if i in value:
#             return 'mem'
#     if 'sub' in value:
#         return 'sub'
#     elif 'loc' in value:
#         return 'loc'
#     elif '[' in value and ']' in value:
#         return 'mem'
#     elif 'offset' in value or 'ptr' in value:
#         return 'mem'
#     elif 'h' in value or value.isdigit() or 'db ' in value:
#         return 'val'
#
#     elif value in reg_32_list:
#         return 'r32'
#     elif value in reg_16_list:
#         return 'r16'
#     elif value in reg_8_list:
#         return 'rg8'
#     elif 'dword_' in value:
#         return 'val'
#     else:
#         return 'oth'

def list2Str(L):
    Str = ""
    if L:
        Str = L[0]
        for i in range(1,len(L)):
            Str = Str + ' ' + L[i]
    return Str

'''
def getSimHashFromOpts(s):
    width = 1
    FeatureList = list()
    OriList = list()

    for i in range(len(s)):
        OriList = OriList + s[i].split(' ')

    if len(OriList) < width:
        FeatureList.append(list2Str(OriList))
    for i in range(max((len(OriList) - width + 1), 1)):
        FeatureList.append(list2Str(OriList[i: i+width]))
    FinalStr = hex(Simhash(FeatureList).value)[2:len(hex(Simhash(FeatureList).value)) - 1]
    if len(FinalStr) >= 16:
        return FinalStr[0:16]
    else:
        for i in range(len(FinalStr),16):
            FinalStr = FinalStr + '0'
        return FinalStr
'''

def getSimHashFromOpts(s):
    width = 2
    FeatureList = list()
    OriList = list()

    if len(s) < width:
        FeatureList.append(list2Str(s))
    for i in range(max((len(s) - width + 1), 1)):
        FeatureList.append(list2Str(s[i: i+width]))
    FinalStr = hex(Simhash(FeatureList).value)[2:len(hex(Simhash(FeatureList).value)) - 1]
    if len(FinalStr) >= 16:
        return FinalStr[0:16]
    else:
        for i in range(len(FinalStr),16):
            FinalStr = FinalStr + '0'
        return FinalStr


def NoComma(value):
    return value.split(',')[0]
'''
def Format(StrOp):
    ValList = list()
    OptionList = StrOp.split(' ')
    if len(OptionList) <= 2:
        FormatString = OptionList[0]
    else:
        FormatString = ''
        end = len(OptionList) - 1
        TempStr = OptionList[end]
        end -= 1


        while OptionList[end]:
            if ',' not in OptionList[end]:
                TempStr = OptionList[end] + TempStr
            else:
                ValList.append(format_val(NoComma(TempStr)))
                TempStr = OptionList[end]
            end -= 1
        ValList.append(format_val(NoComma(TempStr)))

        if len(OptionList[0]) < 3:
            for i in range(3):
                if len(OptionList[0]) > i:
                    FormatString = FormatString + OptionList[0][i]
                else:
                    FormatString = FormatString + '0'
        else:
            FormatString = OptionList[0][0:3]


        while len(ValList) > 0:
            FormatString = FormatString + ' '
            FormatString = FormatString + ValList.pop()

    return FormatString
'''
def Format(StrOp):
    OptionList = StrOp.split(' ')
    FormatString = OptionList[0]

    for i in OptionList:
        if i == OptionList[0]:
            continue
        if i:
            FormatString = FormatString + ' ' + format_val(i)

    return FormatString + ';'


def EndBlock(blockName, blockStrList, blockJumpList, funcDict):
    # print 'Block ' + blockName + ': '
    # print blockStrList
    # print blockJumpList
    blockDict = dict()
    blockDict['Sim'] = getSimHashFromOpts(blockStrList)
    blockDict['Opt'] = blockStrList
    blockDict['Jump'] = blockJumpList
    funcDict[blockName] = blockDict
    blockStrList = list()
    blockJumpList = list()

    return funcDict, blockStrList, blockJumpList

def analysis(filename):

    '''


    :param filename: ASM file
    :return:

    E.G.:
    {
        "sub_401D04": {
            "sub_401D04": {
                "Opt": [
                    "pus r32",
                    "mov r32 mem",
                    "add mem",
                    "pop r32",
                    "ret val"
                ],
                "Jump": [],
                "Sim": "c5d394edd657f0fb"
                    }
                },

        "sub_40144F": {
            "sub_40144F": {
                "Opt": [
                    "cmp mem val",
                    "jz0 loc",
                    "lea r32 mem",
                    "cal sub",
                    "mov r32 mem",
                    "sub r32 r32",
                    "sar r32 val",
                    "pus r32"
                ],
                "Jump": [
                    "loc_401496"
                ],
                "Sim": "9ef024f1a03752f4"
            },
            "loc_401465": {
                "Opt": [
                    "lea r32 mem",
                    "cal sub",
                    "pus r32"
                ],
                "Jump": [],
                "Sim": "3e692542a2be4f60"
            },
            "loc_40146E": {
                "Opt": [
                    "lea r32 mem",
                    "pus r32",
                    "cal sub"
                ],
                "Jump": [],
                "Sim": "840d9d0284b215b5"
            },
            "loc_401477": {
                "Opt": [
                    "add r32 val",
                    "pus r32",
                    "mov r32 mem",
                    "add mem r32",
                    "pop r32",
                    "ret val",
                    "jnz loc",
                    "cmp mem val",
                    "jz0 loc",
                    "mov r32 mem",
                    "xor r32 r32"
                ],
                "Jump": [
                    "loc_401477",
                    "loc_40146E"
                ],
                "Sim": "f9df05d5174411f1"
            },
            "loc_401496": {
                "Opt": [
                    "div mem",
                    "mov mem r32",
                    "mov mem val",
                    "mov r32 mem",
                    "mov mem r32",
                    "pus val",
                    "lea r32 mem",
                    "pus r32",
                    "pus val",
                    "pus val"
                ],
                "Jump": [],
                "Sim": "a8f9350a14b38d89"
            }
        },
        ...
    }
    '''

    f = open(filename, 'r')
    flag = False
    # print 'Analysis this File: ' + filename
    blockStrList = list()
    blockJumpList = list()
    FileDict = dict()
    blockName = ''
    funName = ''
    funcDict = dict()

    for i in f.readlines():
        """####
        if  i[:5] == '.text' and'=' not in i and 'align ' not in i and ('+' not in i or ('+' in i and '[' in i) or
            ('+' in i and 'CODE' in i) or ('+' in i and 'DATA' in i)) and '>' not in i and i.count('h') < 4:
        """
        # print i
        if  '=' not in i and 'align ' not in i and ('+' not in i or ('+' in i and '[' in i) or
            ('+' in i and 'CODE' in i) or ('+' in i and 'DATA' in i)) and '>' not in i and i.count('h') < 4:
            i = i[:i.find(';')].strip()
            # print '---------------------------------------------'
            # print i
            code_list_1 = i.split('\t')
            # print code_list_1
            code_str = ''.join(code_list_1[len(code_list_1) - 2:]).strip()

            # print code_str

            if '.text' not in code_str and "db '" not in code_str and code_str[:3] != 'db ' and code_str[:3] != 'dd ':
                # print code_str

                if 'proc near' in code_str:
                    # print '1 ' + code_str
                    flag = True
                    FuncStr = list()

                    funName = code_str.split(' ')[0]
                    # FileDict[funName] = dict()

                    funcDict = dict()
                    blockName = funName
                    blockStrList = list()
                    blockJumpList = list()

                elif 'endp' in code_str and code_str.split(' ')[0] == funName:

                    # print '0 ' + code_str
                    funcDict, blockStrList, blockJumpList = EndBlock(blockName, blockStrList, blockJumpList, funcDict)
                    FileDict[funName] = funcDict
                    funcDict = dict()
                    flag = False

                    # else:
                    #     print 'Something Wrong in Line: ' + code_str

                elif 'loc' == code_str[0:3] and flag == True:
                    funcDict, blockStrList, blockJumpList = EndBlock(blockName, blockStrList, blockJumpList, funcDict)

                    blockName = code_str.split(':')[0]

                elif 'j' == code_str[0:1] and flag == True:
                    blockStrList.append(Format(code_str))
                    blockJumpList.append(code_str.split(' ').pop())

                elif flag == True:
                    # print '3 '
                    try:
                        blockStrList.append(Format(code_str))
                    except:
                        print 'Format Wrong: ' + code_str
                # else:
                #     print 'Wrong Input Line: ' + code_str
            # print '\n'
    f.close()
    return FileDict


if __name__ == '__main__':
    TrainSet = r'F:\virtus_test\asm_file\TrainSet'
    ExtTrain = r'F:\virtus_test\asm_file\ExtTrain'


    if not os.path.isdir(ExtTrain):
        os.makedirs(ExtTrain)

    firstLevelDir = os.listdir(TrainSet)
    for i in firstLevelDir:
        print os.path.join(TrainSet, i) + '----->' + os.path.join(ExtTrain, i) + '.json'
        analy = analysis(os.path.join(TrainSet, i))
        with open (os.path.join(ExtTrain, i) + '.json', 'w') as f:
            json.dump(analy, f, indent=4)
        # print analy

    # analy = analysis('/home/houmo/Downloads/malware_test/train/9_38.asm')
    # with open ('/home/houmo/Desktop/report.json', 'w') as f:
    #     json.dump(analy, f, indent=4)

# if __name__ == "__main__":
#     print(getSimHashFromOpts(["call    sub_401C14;", "push    ecx;", "push    ebp;", "pop     ecx"]))
#     print(getSimHashFromOpts(["add    sub_401C14;", "push    ecx;", "push    ebp;", "pop     ecx"]))
